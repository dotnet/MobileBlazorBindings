steps:

- task: MicroBuildSigningPlugin@2
  inputs:
    signType: $(_SignType)
    feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
  continueOnError: false
  env:
    TeamName: $(_TeamName)
  condition: ne(variables['Build.Reason'], 'PullRequest')

- task: BatchScript@1
  displayName: 'Install Android SDK'
  inputs:
    filename: './azure-pipelines/install-android-sdk.cmd'
    #arguments: '' # Optional

# Note: 2019-12 Even though 'dotnet build' can build this, it's not compatible with MicroBuild Signing. Must use MSBuild.
- task: MSBuild@1
  displayName: 'Build src projects'
  inputs:
    msbuildArguments: /t:build /p:NoRestore=true
    solution: CI/CI.Windows.proj
    configuration: '$(BuildConfiguration)'

- task: VSTest@2
  displayName: 'Run tests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*.UnitTests.dll
      !**\obj\**
    configuration: '$(BuildConfiguration)'

- task: MSBuild@1
  displayName: 'Pack src projects'
  inputs:
    msbuildArguments: /t:pack /p:NoBuild=true
    solution: CI/CI.Windows.proj
    configuration: '$(BuildConfiguration)'

- task: MSBuild@1
  displayName: 'Prepare template project generated files'
  inputs:
    msbuildArguments: /t:SetNuGetPackageVersionInTemplateJson
    solution: 'templates/*.csproj'
    configuration: '$(BuildConfiguration)'

- task: MSBuild@1
  displayName: 'Pack template projects'
  inputs:
    msbuildArguments: /t:pack
    solution: 'templates/*.csproj'
    configuration: '$(BuildConfiguration)'

- task: PowerShell@2
  inputs:
    filePath: azure-pipelines/variables/_pipelines.ps1
    failOnStderr: true
  displayName: Update pipeline variables based on build outputs
  condition: succeededOrFailed()

- task: CopyFiles@2
  displayName: 'Copy packages to staging directory'
  inputs:
    contents: '$(System.DefaultWorkingDirectory)/**/*.nupkg'
    targetFolder: $(Build.ArtifactStagingDirectory)/SignedPackages
    flattenFolders: true
  condition: ne(variables['Build.Reason'], 'PullRequest')

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)/SignedPackages
    artifactName: 'SignedPackages'
  condition: ne(variables['Build.Reason'], 'PullRequest')

# - task: PublishSymbols@2
#   inputs:
#     SymbolsFolder: $(Build.ArtifactStagingDirectory)/symbols-Windows
#     SearchPattern: '**/*.pdb'
#     IndexSources: false
#     SymbolServerType: TeamServices
#   displayName: Publish symbols to symbol server
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), eq(variables['Agent.OS'], 'Windows_NT'))

# - task: MicroBuildCodesignVerify@2
#   inputs:
#     TargetFolders: '$(Build.ArtifactStagingDirectory)/SignedPackages'
#     ExcludeSNVerify: true
#     WhiteListPathForCerts: SignVerifyIgnore.csv
#     WhiteListPathForSigs: SignVerifyIgnore.csv
#   env:
#     TeamName: $(_TeamName)

- task: MicroBuildCleanup@1
  env:
    TeamName: $(_TeamName)
  condition: ne(variables['Build.Reason'], 'PullRequest')
